{"version":3,"sources":["webpack:///./src/da-cms/src/text/TextEditor.jsx"],"names":["TextEditor","props","state","setState","useState","EditorState","createWithContent","stateFromHTML","init","content","handleChange","data","onChange","plain","stateToHTML","getCurrentContent","getPlainText","useEffect","placeholder","propTypes","PropTypes","string","func","path","bool"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;CAEA;;AAEA,MAAMA,UAAU,GAAIC,KAAD,IAAW;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,sDAAQ,CAACC,oDAAW,CAACC,iBAAZ,CAA8BC,0EAAa,CAACN,KAAK,CAACO,IAAN,IAAcP,KAAK,CAACQ,OAArB,CAA3C,CAAD,CAAlC;;AACA,QAAMC,YAAY,GAAGC,IAAI,IAAI;AAC3BR,YAAQ,CAACQ,IAAD,CAAR;AACAV,SAAK,CAACW,QAAN,CAAgB,CAACX,KAAK,CAACY,KAAP,GAAeC,wEAAW,CAACZ,KAAK,CAACa,iBAAN,EAAD,CAA1B,GAAwDb,KAAK,CAACa,iBAAN,GAA0BC,YAA1B,EAAxE;AACD,GAHD;;AAKAC,yDAAS,CAAC,MAAM;AACd,QAAIhB,KAAK,CAACO,IAAV,EAAgBL,QAAQ,CAACE,oDAAW,CAACC,iBAAZ,CAA8BC,0EAAa,CAACN,KAAK,CAACO,IAAP,CAA3C,CAAD,CAAR;AACjB,GAFQ,EAEN,CAACP,KAAK,CAACO,IAAP,CAFM,CAAT;AAIA,SACE,wHAEE,2DAAC,+CAAD;AACE,eAAW,EAAEN,KADf;AAEE,YAAQ,EAAEQ,YAFZ;AAGE,eAAW,EAAET,KAAK,CAACiB;AAHrB,IAFF,CADF;AAUD,CArBD;;AAuBAlB,UAAU,CAACmB,SAAX,GAAuB;AACrBV,SAAO,EAAEW,iDAAS,CAACC,MADE;AAErBT,UAAQ,EAAEQ,iDAAS,CAACE,IAFC;AAGrBC,MAAI,EAAEH,iDAAS,CAACC,MAHK;AAIrBH,aAAW,EAAEE,iDAAS,CAACC,MAJF;AAKrBb,MAAI,EAAEY,iDAAS,CAACC,MALK;AAMrBR,OAAK,EAAEO,iDAAS,CAACI,IANI,CASvB;AACA;AACA;;AAXuB,CAAvB;AAaexB,yEAAf,E","file":"9.bundle.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nimport {Editor, EditorState} from 'draft-js'\nimport {stateToHTML} from 'draft-js-export-html'\nimport {stateFromHTML} from 'draft-js-import-html'\n// import MaterialRichEdit from './MaterialRichEdit'\n\nconst TextEditor = (props) => {\n  const [state, setState] = useState(EditorState.createWithContent(stateFromHTML(props.init || props.content)))\n  const handleChange = data => {\n    setState(data)\n    props.onChange( !props.plain ? stateToHTML(state.getCurrentContent()) : state.getCurrentContent().getPlainText())\n  }\n\n  useEffect(() => {\n    if (props.init) setState(EditorState.createWithContent(stateFromHTML(props.init)))\n  }, [props.init])\n\n  return (\n    <>\n      {/* <MaterialRichEdit/> */}\n      <Editor\n        editorState={state}\n        onChange={handleChange}\n        placeholder={props.placeholder}\n      />\n    </>\n  )\n}\n\nTextEditor.propTypes = {\n  content: PropTypes.string,\n  onChange: PropTypes.func,\n  path: PropTypes.string,\n  placeholder: PropTypes.string,\n  init: PropTypes.string,\n  plain: PropTypes.bool,\n}\n\n// TextEditor.defaultProps = {\n//   plain: false,\n// };\n\nexport default TextEditor"],"sourceRoot":""}